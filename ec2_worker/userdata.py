"""
Create the user data script for the EC2 worker instance.
"""

import os
import pulumi
import pulumi_aws as aws


def generate_userdata(
    tailscale_key_path: str,
    hostname: str = None,
    tags: list = None,
    accept_routes: bool = True,
    accept_dns: bool = True,
    enable_ssh: bool = True
) -> str:
    """
    Generate user data script for EC2 instance with Tailscale installation.
    
    Args:
        tailscale_key_path (str): Path to the Tailscale auth key file
        hostname (str, optional): Custom hostname for the instance in Tailscale
        tags (list, optional): List of Tailscale tags (e.g., ["tag:aws", "tag:pulumi"])
        accept_routes (bool): Accept routes from other Tailscale nodes
        accept_dns (bool): Use Tailscale DNS
        enable_ssh (bool): Enable SSH over Tailscale
    
    Returns:
        str: User data script for EC2 instance
    """
    
    # Read Tailscale auth key
    try:
        if not os.path.exists(tailscale_key_path):
            raise FileNotFoundError(f"Tailscale key file not found: {tailscale_key_path}")
        
        with open(tailscale_key_path, 'r') as f:
            auth_key = f.read().strip()
        
        if not auth_key:
            raise ValueError("Tailscale auth key is empty")
            
    except Exception as e:
        raise RuntimeError(f"Failed to read Tailscale auth key: {str(e)}")
    
    # Build Tailscale up command options
    tailscale_options = ["--authkey=" + auth_key]
    
    if hostname:
        tailscale_options.append(f"--hostname={hostname}")
    
    if tags:
        # Convert tags list to comma-separated string
        tags_str = ",".join(tags)
        tailscale_options.append(f"--advertise-tags={tags_str}")
    
    if accept_routes:
        tailscale_options.append("--accept-routes")
    
    if accept_dns:
        tailscale_options.append("--accept-dns")
    
    if enable_ssh:
        tailscale_options.append("--ssh")
    
    # Join all options
    tailscale_cmd_options = " ".join(tailscale_options)
    
    # Generate the user data script
    userdata_script = f"""#!/bin/bash

# Tailscale installation and configuration script
# Generated by Pulumi for EC2 instance

# Redirect all output to log file for debugging
exec > >(tee /var/log/tailscale-install.log) 2>&1

echo "=== Starting Tailscale installation ==="
echo "Timestamp: $(date)"
echo "Instance hostname: $(hostname)"

# Update system packages
echo "Updating system packages..."
apt-get update -y

# Install curl if not present
if ! command -v curl &> /dev/null; then
    echo "Installing curl..."
    apt-get install -y curl
fi

# Download and install Tailscale
echo "Downloading and installing Tailscale..."
curl -fsSL https://tailscale.com/install.sh | sh

# Check if Tailscale was installed successfully
if ! command -v tailscale &> /dev/null; then
    echo "ERROR: Tailscale installation failed"
    exit 1
fi

echo "Tailscale installed successfully"

# Start Tailscale service
echo "Starting Tailscale service..."
systemctl enable tailscaled
systemctl start tailscaled

# Wait for service to be ready
sleep 5

# Connect to Tailscale network
echo "Connecting to Tailscale network..."
echo "Running: tailscale up {tailscale_cmd_options}"

# Note: We don't echo the actual auth key for security
tailscale up {tailscale_cmd_options}

# Check connection status
echo "Checking Tailscale status..."
sleep 3
tailscale status

# Get Tailscale IP
echo "Tailscale IP addresses:"
tailscale ip -4
tailscale ip -6

echo "=== Tailscale installation completed ==="
echo "Check status with: sudo tailscale status"
echo "View logs with: sudo journalctl -u tailscaled"
"""

    return userdata_script


def generate_simple_userdata(script_content: str) -> str:
    """
    Generate a simple user data script with custom content.
    
    Args:
        script_content (str): Custom bash script content
    
    Returns:
        str: User data script for EC2 instance
    """
    
    userdata_script = f"""#!/bin/bash

# Custom user data script
# Generated by Pulumi for EC2 instance

# Redirect all output to log file for debugging
exec > >(tee /var/log/custom-userdata.log) 2>&1

echo "=== Starting custom user data script ==="
echo "Timestamp: $(date)"
echo "Instance hostname: $(hostname)"

{script_content}

echo "=== Custom user data script completed ==="
"""

    return userdata_script

